{{ if .Values.usePostgresContainer }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: data
    app: database
  name: "{{ .Values.name }}-postgres-data"
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    io.kompose.service: postgres
    app: database
  name: "{{ .Values.name }}-postgres"
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: postgres
        app: database
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
    spec:
      containers:
      - env:
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: "{{ .Values.name }}-configmap"
              key: postgres-host
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              name: "{{ .Values.name }}-configmap"
              key: postgres-port
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: "{{ .Values.name }}-configmap"
              key: postgres-db
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: "{{ .Values.name }}-configmap"
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.name }}-secret"
              key: postgres-password
        name: postgres
        image: postgres:9.6.5
        resources: {}
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          subPath: postgres
          name: data
      restartPolicy: Always
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: data
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: postgres
    app: database
  name: "{{ .Values.name }}-postgres"
spec:
  clusterIP: None
  ports:
  - name: headless
    port: 55555
    targetPort: 0
  selector:
    io.kompose.service: postgres
status:
  loadBalancer: {}
{{ end }}
